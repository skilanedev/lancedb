/* Automatically generated by cbindgen */



#ifndef LANCEDB_H
#define LANCEDB_H

/* Warning: This file is autogenerated. Do not modify. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

/**
 * When interpreting Polars dataframes as polars-arrow record batches,
 * one must decide whether to use Arrow string/binary view types
 * instead of the standard Arrow string/binary types.
 * For now, we will not use string view types because conversions
 * for string view types from polars-arrow to arrow-rs are not yet implemented.
 * See: https://lists.apache.org/thread/w88tpz76ox8h3rxkjl4so6rg3f1rv7wt for the
 * differences in the types.
 */
#define POLARS_ARROW_FLAVOR false

/**
 * C-compatible error code enum (0 = success, negative = error).
 */
typedef enum LanceErrorCode {
    Success = 0,
    Failure = -1,
} LanceErrorCode;

/**
 * A connection to LanceDB
 */
typedef struct Connection Connection;

/**
 * A Table is a collection of strong typed Rows.
 *
 * The type of the each row is defined in Apache Arrow [Schema].
 */
typedef struct Table Table;

typedef struct Connection *LanceConnectionPtr;

typedef struct Table *LanceTablePtr;

typedef struct LanceKnnResult {
    uint64_t id;
    float distance;
} LanceKnnResult;

/**
 * Connects to LanceDB at the given path (blocks on async).
 * Returns opaque pointer to connection or null on error.
 */
LanceConnectionPtr lance_connect(const char *path);

/**
 * Frees a connection pointer.
 */
void lance_free_connection(LanceConnectionPtr conn);

/**
 * Creates a table in the database (blocks on async).
 * Schema_json is a JSON string for the schema.
 * Returns error code.
 */
enum LanceErrorCode lance_create_table(LanceConnectionPtr conn,
                                       const char *name,
                                       const char *schema_json);

/**
 * Opens a table from the connection (blocks on async).
 * Returns opaque pointer to table or null on error.
 */
LanceTablePtr lance_open_table(LanceConnectionPtr conn, const char *name);

/**
 * Frees a table pointer.
 */
void lance_free_table(LanceTablePtr table);

/**
 * Adds a record batch to the table (blocks on async).
 * Batch_ptr is a pointer to serialized Arrow IPC data; length is size in bytes.
 * Returns error code.
 */
enum LanceErrorCode lance_add_batch(LanceTablePtr table,
                                    const uint8_t *batch_ptr,
                                    uintptr_t length);

/**
 * Queries nearest neighbors for a vector (blocks on async).
 * Vector is f32 array, dim is dimension, k is limit.
 * Returns pointer to result array of LanceKnnResult or null; out_count is number of results.
 * Caller must free with lance_free_results.
 */
struct LanceKnnResult *lance_query_knn(LanceTablePtr table,
                                       const float *vector,
                                       int dim,
                                       int k,
                                       int *out_count);

/**
 * Frees a KNN results pointer.
 */
void lance_free_results(struct LanceKnnResult *results);

/**
 * Fetches a row by row_id as JSON string (blocks on async).
 * Returns allocated C string (caller must free with lance_free_string) or null on error.
 */
const char *lance_get_row_by_id(LanceTablePtr table, uint64_t id);

/**
 * Frees a string returned by LanceDB (e.g., from lance_get_row_by_id).
 */
void lance_free_string(const char *s);

/**
 * Creates an IVF_HNSW_PQ index on the table (blocks on async).
 * Columns is C string array, num_cols is count.
 * Returns error code.
 */
enum LanceErrorCode lance_create_hnsw_index(LanceTablePtr table,
                                            const char *const *columns,
                                            int num_cols);

/**
 * Clears all data from the table (blocks on async, deletes where true).
 * Returns error code.
 */
enum LanceErrorCode lance_clear_table(LanceTablePtr table);

#endif  /* LANCEDB_H */
